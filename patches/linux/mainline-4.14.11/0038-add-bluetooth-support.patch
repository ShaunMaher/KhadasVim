From eb604d5a6a2022ac80bb74185f67e40e52cea00f Mon Sep 17 00:00:00 2001
From: Nick <nick@khadas.com>
Date: Thu, 4 Jan 2018 09:57:22 +0800
Subject: [PATCH] add bluetooth support

---
 .../dts/amlogic/meson-gxl-s905x-khadas-vim.dts     |   7 +
 arch/arm64/configs/defconfig                       |  11 +-
 drivers/misc/Kconfig                               |   1 +
 drivers/misc/Makefile                              |   1 +
 drivers/misc/aml_bt/Kconfig                        |   6 +
 drivers/misc/aml_bt/Makefile                       |   1 +
 drivers/misc/aml_bt/bluesleep.c                    | 960 +++++++++++++++++++++
 drivers/misc/aml_bt/bluesleep.h                    |  22 +
 drivers/misc/aml_bt/bt_device.c                    | 350 ++++++++
 include/linux/aml_gpio_consumer.h                  |  55 ++
 include/linux/bt_device.h                          |  29 +
 11 files changed, 1440 insertions(+), 3 deletions(-)
 create mode 100644 drivers/misc/aml_bt/Kconfig
 create mode 100644 drivers/misc/aml_bt/Makefile
 create mode 100644 drivers/misc/aml_bt/bluesleep.c
 create mode 100644 drivers/misc/aml_bt/bluesleep.h
 create mode 100644 drivers/misc/aml_bt/bt_device.c
 create mode 100644 include/linux/aml_gpio_consumer.h
 create mode 100644 include/linux/bt_device.h

diff --git a/arch/arm64/boot/dts/amlogic/meson-gxl-s905x-khadas-vim.dts b/arch/arm64/boot/dts/amlogic/meson-gxl-s905x-khadas-vim.dts
index 13b24c9..1fa155a 100644
--- a/arch/arm64/boot/dts/amlogic/meson-gxl-s905x-khadas-vim.dts
+++ b/arch/arm64/boot/dts/amlogic/meson-gxl-s905x-khadas-vim.dts
@@ -77,6 +77,13 @@
 		};
 	};
 
+	bt-dev {
+		compatible = "amlogic, bt-dev";
+		dev_name = "bt-dev";
+		status = "okay";
+		gpio_reset = <&gpio       GPIOX_17       GPIO_ACTIVE_HIGH>;
+	};
+
 	sound {
 		compatible = "simple-audio-card";
 		simple-audio-card,name = "meson-gxl-preview";
diff --git a/arch/arm64/configs/defconfig b/arch/arm64/configs/defconfig
index b88b099..ba50d75 100644
--- a/arch/arm64/configs/defconfig
+++ b/arch/arm64/configs/defconfig
@@ -134,12 +134,16 @@ CONFIG_VLAN_8021Q_GVRP=y
 CONFIG_VLAN_8021Q_MVRP=y
 CONFIG_BPF_JIT=y
 CONFIG_BT=y
+CONFIG_BT_RFCOMM=y
+CONFIG_BT_RFCOMM_TTY=y
+CONFIG_BT_BNEP=y
+CONFIG_BT_BNEP_MC_FILTER=y
+CONFIG_BT_BNEP_PROTO_FILTER=y
 CONFIG_BT_HIDP=y
-# CONFIG_BT_HS is not set
-# CONFIG_BT_LE is not set
 CONFIG_BT_LEDS=y
 # CONFIG_BT_DEBUGFS is not set
-CONFIG_BT_HCIUART=m
+CONFIG_BT_HCIUART=y
+CONFIG_BT_HCIUART_H4=y
 CONFIG_BT_HCIUART_LL=y
 CONFIG_CFG80211=y
 CONFIG_MAC80211=y
@@ -163,6 +167,7 @@ CONFIG_VIRTIO_BLK=y
 CONFIG_BLK_DEV_NVME=y
 CONFIG_SRAM=y
 CONFIG_EEPROM_AT25=m
+CONFIG_AMLOGIC_BT_DEVICE=y
 # CONFIG_SCSI_PROC_FS is not set
 CONFIG_BLK_DEV_SD=y
 CONFIG_SCSI_SAS_ATA=y
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 8136dc7..5ef5e2c 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -518,4 +518,5 @@ source "drivers/misc/mic/Kconfig"
 source "drivers/misc/genwqe/Kconfig"
 source "drivers/misc/echo/Kconfig"
 source "drivers/misc/cxl/Kconfig"
+source "drivers/misc/aml_bt/Kconfig"
 endmenu
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index ad0e64f..1100cb8 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -56,6 +56,7 @@ obj-$(CONFIG_CXL_BASE)		+= cxl/
 obj-$(CONFIG_ASPEED_LPC_CTRL)	+= aspeed-lpc-ctrl.o
 obj-$(CONFIG_ASPEED_LPC_SNOOP)	+= aspeed-lpc-snoop.o
 obj-$(CONFIG_PCI_ENDPOINT_TEST)	+= pci_endpoint_test.o
+obj-$(CONFIG_AMLOGIC_BT_DEVICE)         += aml_bt/
 
 lkdtm-$(CONFIG_LKDTM)		+= lkdtm_core.o
 lkdtm-$(CONFIG_LKDTM)		+= lkdtm_bugs.o
diff --git a/drivers/misc/aml_bt/Kconfig b/drivers/misc/aml_bt/Kconfig
new file mode 100644
index 0000000..9a4be05
--- /dev/null
+++ b/drivers/misc/aml_bt/Kconfig
@@ -0,0 +1,6 @@
+config AMLOGIC_BT_DEVICE
+    bool "BT Device support"
+    depends on BT && RFKILL
+    default n
+    ---help---
+      Say Y here if you want to use the BT device.
diff --git a/drivers/misc/aml_bt/Makefile b/drivers/misc/aml_bt/Makefile
new file mode 100644
index 0000000..3478e7a
--- /dev/null
+++ b/drivers/misc/aml_bt/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_AMLOGIC_BT_DEVICE) += bt_device.o
diff --git a/drivers/misc/aml_bt/bluesleep.c b/drivers/misc/aml_bt/bluesleep.c
new file mode 100644
index 0000000..6c6255b
--- /dev/null
+++ b/drivers/misc/aml_bt/bluesleep.c
@@ -0,0 +1,960 @@
+/*
+ * Date         Author           Comment
+ * -----------  --------------   --------------------------------
+ * 2006-Apr-28	Motorola	 The kernel module for running the Bluetooth(R)
+ *                               Sleep-Mode Protocol from the Host side
+ *  2006-Sep-08  Motorola        Added workqueue for handling sleep work.
+ *  2007-Jan-24  Motorola        Added mbm_handle_ioi() call to ISR.
+ *  2009-Aug-10  Motorola        Changed "add_timer" to "mod_timer" to solve
+ *                               race when flurry of queued work comes in.
+ */
+
+#define pr_fmt(fmt)	"Bluetooth: %s: " fmt, __func__
+
+#include <linux/module.h>	/* kernel module definitions */
+#include <linux/errno.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/notifier.h>
+#include <linux/proc_fs.h>
+#include <linux/spinlock.h>
+#include <linux/timer.h>
+#include <linux/uaccess.h>
+#include <linux/version.h>
+#include <linux/workqueue.h>
+#include <linux/platform_device.h>
+#include <linux/amlogic/aml_gpio_consumer.h>
+#include <linux/irq.h>
+#include <linux/ioport.h>
+#include <linux/param.h>
+#include <linux/bitops.h>
+#include <linux/termios.h>
+#include <linux/wakelock_android.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#include <linux/serial_core.h>
+
+#include <linux/of_irq.h>
+/* #include <linux/platform_data/msm_serial_hs.h> */
+
+#include <net/bluetooth/bluetooth.h>
+#include <net/bluetooth/hci_core.h> /* event notifications */
+#include "../../bluetooth/hci_uart.h"
+#include "bluesleep.h"
+
+#define BT_SLEEP_DBG
+#ifndef BT_SLEEP_DBG
+#define BT_DBG(fmt, arg...)
+#endif
+/*
+ * Defines
+ */
+
+#define VERSION		"1.2"
+#define PROC_DIR	"bluetooth/sleep"
+#define BT_SLEEP "bluesleep"
+
+#define POLARITY_LOW 0
+#define POLARITY_HIGH 1
+
+#define BT_PORT_ID	0
+
+/* enable/disable wake-on-bluetooth */
+#define BT_ENABLE_IRQ_WAKE 0
+
+#define BT_BLUEDROID_SUPPORT 1
+
+enum {
+	DEBUG_USER_STATE = 1U << 0,
+	DEBUG_SUSPEND = 1U << 1,
+	DEBUG_BTWAKE = 1U << 2,
+	DEBUG_VERBOSE = 1U << 3,
+};
+
+static int debug_mask = DEBUG_USER_STATE;
+//module_param_named(debug_mask, debug_mask, int, S_IRUGO | S_IWUSR | S_IWGRP);
+module_param_named(debug_mask, debug_mask, int, 0664);
+
+struct bluesleep_info {
+	unsigned int host_wake;
+	unsigned int ext_wake;
+	unsigned int host_wake_irq;
+	struct uart_port *uport;
+	struct wake_lock wake_lock;
+	int irq_polarity;
+	int has_ext_wake;
+};
+
+/* work function */
+static void bluesleep_sleep_work(struct work_struct *work);
+
+/* work queue */
+DECLARE_DELAYED_WORK(sleep_workqueue, bluesleep_sleep_work);
+
+/* Macros for handling sleep work */
+#define bluesleep_rx_busy()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_tx_busy()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_rx_idle()     schedule_delayed_work(&sleep_workqueue, 0)
+#define bluesleep_tx_idle()     schedule_delayed_work(&sleep_workqueue, 0)
+
+/* 5 second timeout */
+#define TX_TIMER_INTERVAL  5
+
+/* state variable names and bit positions */
+#define BT_PROTO	0x01
+#define BT_TXDATA	0x02
+#define BT_ASLEEP	0x04
+#define BT_EXT_WAKE	0x08
+#define BT_SUSPEND	0x10
+
+#define PROC_BTWAKE	0
+#define PROC_HOSTWAKE	1
+#define PROC_PROTO	2
+#define PROC_ASLEEP	3
+#if BT_BLUEDROID_SUPPORT
+#define PROC_LPM	4
+#define PROC_BTWRITE	5
+#endif
+
+#if BT_BLUEDROID_SUPPORT
+static bool has_lpm_enabled;
+#else
+/* global pointer to a single hci device. */
+static struct hci_dev *bluesleep_hdev;
+#endif
+
+static struct platform_device *bluesleep_uart_dev;
+static struct bluesleep_info *bsi;
+static int bt_port_id = 1;
+
+/* module usage */
+static atomic_t open_count = ATOMIC_INIT(1);
+
+/*
+ * Local function prototypes
+ */
+#if !BT_BLUEDROID_SUPPORT
+static int bluesleep_hci_event(struct notifier_block *this,
+			unsigned long event, void *data);
+#endif
+static int bluesleep_start(void);
+static void bluesleep_stop(void);
+
+/*
+ * Global variables
+ */
+
+/** Global state flags */
+static unsigned long flags;
+
+/** Tasklet to respond to change in hostwake line */
+static struct tasklet_struct hostwake_task;
+
+/** Transmission timer */
+static void bluesleep_tx_timer_expire(unsigned long data);
+static DEFINE_TIMER(tx_timer, bluesleep_tx_timer_expire, 0, 0);
+
+/** Lock for state transitions */
+static spinlock_t rw_lock;
+
+#if !BT_BLUEDROID_SUPPORT
+/** Notifier block for HCI events */
+struct notifier_block hci_event_nblock = {
+	.notifier_call = bluesleep_hci_event,
+};
+#endif
+
+struct proc_dir_entry *bluetooth_dir, *sleep_dir;
+
+/*
+ * Local functions
+ */
+
+static void hsuart_power(int on)
+{
+}
+
+/**
+ * @return 1 if the Host can go to sleep, 0 otherwise.
+ */
+int bluesleep_can_sleep(void)
+{
+	/* check if WAKE_BT_GPIO and BT_WAKE_GPIO are both deasserted */
+	return (gpio_get_value(bsi->host_wake) != bsi->irq_polarity) &&
+		(test_bit(BT_EXT_WAKE, &flags)) &&
+		(bsi->uport != NULL);
+}
+
+void bluesleep_sleep_wakeup(void)
+{
+	if (test_bit(BT_ASLEEP, &flags)) {
+		if (debug_mask & DEBUG_SUSPEND)
+			pr_info("waking up...\n");
+		wake_lock(&bsi->wake_lock);
+		/* Start the timer */
+		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
+		if (debug_mask & DEBUG_BTWAKE)
+			pr_info("BT WAKE: set to wake\n");
+		if (bsi->has_ext_wake == 1)
+			gpio_set_value(bsi->ext_wake, 1);
+		clear_bit(BT_EXT_WAKE, &flags);
+		clear_bit(BT_ASLEEP, &flags);
+		/*Activating UART */
+		hsuart_power(1);
+	}
+}
+
+/**
+ * @brief@  main sleep work handling function which update the flags
+ * and activate and deactivate UART ,check FIFO.
+ */
+static void bluesleep_sleep_work(struct work_struct *work)
+{
+	if (bluesleep_can_sleep()) {
+		/* already asleep, this is an error case */
+		if (test_bit(BT_ASLEEP, &flags)) {
+			if (debug_mask & DEBUG_SUSPEND)
+				pr_info("already asleep\n");
+			return;
+		}
+
+		if (bsi->uport->ops->tx_empty(bsi->uport)) {
+			if (debug_mask & DEBUG_SUSPEND)
+				pr_info("going to sleep...\n");
+			set_bit(BT_ASLEEP, &flags);
+			/*Deactivating UART */
+			hsuart_power(0);
+			/* UART clk is not turned off immediately. Release
+			 * wakelock after 500 ms.
+			 */
+			wake_lock_timeout(&bsi->wake_lock, HZ / 2);
+		} else {
+
+		  mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
+			return;
+		}
+	} else if (test_bit(BT_EXT_WAKE, &flags)
+			&& !test_bit(BT_ASLEEP, &flags)) {
+		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
+		if (debug_mask & DEBUG_BTWAKE)
+			pr_info("BT WAKE: set to wake\n");
+		if (bsi->has_ext_wake == 1)
+			gpio_set_value(bsi->ext_wake, 1);
+		clear_bit(BT_EXT_WAKE, &flags);
+	} else {
+		bluesleep_sleep_wakeup();
+	}
+}
+
+/**
+ * A tasklet function that runs in tasklet context and reads the value
+ * of the HOST_WAKE GPIO pin and further defer the work.
+ * @param data Not used.
+ */
+static void bluesleep_hostwake_task(unsigned long data)
+{
+	if (debug_mask & DEBUG_SUSPEND)
+		pr_info("hostwake line change\n");
+
+	spin_lock(&rw_lock);
+	if (gpio_get_value(bsi->host_wake) == bsi->irq_polarity)
+		bluesleep_rx_busy();
+	else
+		bluesleep_rx_idle();
+
+	spin_unlock(&rw_lock);
+}
+
+/**
+ * Handles proper timer action when outgoing data is delivered to the
+ * HCI line discipline. Sets BT_TXDATA.
+ */
+static void bluesleep_outgoing_data(void)
+{
+	unsigned long irq_flags;
+
+	spin_lock_irqsave(&rw_lock, irq_flags);
+
+	/* log data passing by */
+	set_bit(BT_TXDATA, &flags);
+
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+
+	/* if the tx side is sleeping... */
+	if (test_bit(BT_EXT_WAKE, &flags)) {
+		if (debug_mask & DEBUG_SUSPEND)
+			pr_info("tx was sleeping\n");
+		bluesleep_sleep_wakeup();
+	}
+}
+
+
+#if !BT_BLUEDROID_SUPPORT
+/**
+ * Handles HCI device events.
+ * @param this Not used.
+ * @param event The event that occurred.
+ * @param data The HCI device associated with the event.
+ * @return <code>NOTIFY_DONE</code>.
+ */
+static int bluesleep_hci_event(struct notifier_block *this,
+				unsigned long event, void *data)
+{
+	struct hci_dev *hdev = (struct hci_dev *) data;
+	struct hci_uart *hu;
+	struct uart_state *state;
+
+	if (!hdev)
+		return NOTIFY_DONE;
+
+	switch (event) {
+	case HCI_DEV_REG:
+		if (!bluesleep_hdev) {
+			bluesleep_hdev = hdev;
+			hu  = (struct hci_uart *) hdev->driver_data;
+			state = (struct uart_state *) hu->tty->driver_data;
+			bsi->uport = state->uart_port;
+			/* if bluetooth started, start bluesleep*/
+			bluesleep_start();
+		}
+		break;
+	case HCI_DEV_UNREG:
+		bluesleep_stop();
+		bluesleep_hdev = NULL;
+		bsi->uport = NULL;
+		/* if bluetooth stopped, stop bluesleep also */
+		break;
+	case HCI_DEV_WRITE:
+		bluesleep_outgoing_data();
+		break;
+	}
+
+	return NOTIFY_DONE;
+}
+#endif
+
+/**
+ * Handles transmission timer expiration.
+ * @param data Not used.
+ */
+static void bluesleep_tx_timer_expire(unsigned long data)
+{
+	unsigned long irq_flags;
+
+	if (debug_mask & DEBUG_VERBOSE)
+		pr_info("Tx timer expired\n");
+
+	spin_lock_irqsave(&rw_lock, irq_flags);
+
+	/* were we silent during the last timeout? */
+	if (!test_bit(BT_TXDATA, &flags)) {
+		if (debug_mask & DEBUG_SUSPEND)
+			pr_info("Tx has been idle\n");
+		if (debug_mask & DEBUG_BTWAKE)
+			pr_info("BT WAKE: set to sleep\n");
+		if (bsi->has_ext_wake == 1)
+			gpio_set_value(bsi->ext_wake, 0);
+		set_bit(BT_EXT_WAKE, &flags);
+		bluesleep_tx_idle();
+	} else {
+		if (debug_mask & DEBUG_SUSPEND)
+			pr_info("Tx data during last period\n");
+		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL*HZ));
+	}
+
+	/* clear the incoming data flag */
+	clear_bit(BT_TXDATA, &flags);
+
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+}
+
+/**
+ * Schedules a tasklet to run when receiving an interrupt on the
+ * <code>HOST_WAKE</code> GPIO pin.
+ * @param irq Not used.
+ * @param dev_id Not used.
+ */
+static irqreturn_t bluesleep_hostwake_isr(int irq, void *dev_id)
+{
+	/* schedule a tasklet to handle the change in the host wake line */
+	tasklet_schedule(&hostwake_task);
+	return IRQ_HANDLED;
+}
+
+/**
+ * Starts the Sleep-Mode Protocol on the Host.
+ * @return On success, 0. On error, -1, and <code>errno</code> is set
+ * appropriately.
+ */
+static int bluesleep_start(void)
+{
+	int retval;
+	unsigned long irq_flags;
+
+	spin_lock_irqsave(&rw_lock, irq_flags);
+
+	if (test_bit(BT_PROTO, &flags)) {
+		spin_unlock_irqrestore(&rw_lock, irq_flags);
+		return 0;
+	}
+
+	spin_unlock_irqrestore(&rw_lock, irq_flags);
+
+	if (!atomic_dec_and_test(&open_count)) {
+		atomic_inc(&open_count);
+		return -EBUSY;
+	}
+
+	/* start the timer */
+
+	mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL*HZ));
+
+	/* assert BT_WAKE */
+	if (debug_mask & DEBUG_BTWAKE)
+		pr_info("BT WAKE: set to wake\n");
+	if (bsi->has_ext_wake == 1)
+		gpio_set_value(bsi->ext_wake, 1);
+	clear_bit(BT_EXT_WAKE, &flags);
+	retval = request_irq(bsi->host_wake_irq, bluesleep_hostwake_isr,
+		IRQF_DISABLED,
+		"bluetooth hostwake", NULL);
+	if (retval  < 0) {
+		BT_ERR("Couldn't acquire BT_HOST_WAKE IRQ");
+		goto fail;
+	}
+#if BT_ENABLE_IRQ_WAKE
+	retval = enable_irq_wake(bsi->host_wake_irq);
+	if (retval < 0) {
+		BT_ERR("Couldn't enable BT_HOST_WAKE as wakeup interrupt");
+		goto fail;
+	}
+#endif
+	set_bit(BT_PROTO, &flags);
+	wake_lock(&bsi->wake_lock);
+	return 0;
+
+fail:
+	del_timer(&tx_timer);
+	atomic_inc(&open_count);
+
+	return retval;
+}
+
+/**
+ * Stops the Sleep-Mode Protocol on the Host.
+ */
+static void bluesleep_stop(void)
+{
+	unsigned long irq_flags;
+
+	spin_lock_irqsave(&rw_lock, irq_flags);
+
+	if (!test_bit(BT_PROTO, &flags)) {
+		spin_unlock_irqrestore(&rw_lock, irq_flags);
+		return;
+	}
+
+	/* assert BT_WAKE */
+	if (debug_mask & DEBUG_BTWAKE)
+		pr_info("BT WAKE: set to wake\n");
+	if (bsi->has_ext_wake == 1)
+		gpio_set_value(bsi->ext_wake, 1);
+	clear_bit(BT_EXT_WAKE, &flags);
+	del_timer(&tx_timer);
+	clear_bit(BT_PROTO, &flags);
+
+	if (test_bit(BT_ASLEEP, &flags)) {
+		clear_bit(BT_ASLEEP, &flags);
+		spin_unlock_irqrestore(&rw_lock, irq_flags);
+		hsuart_power(1);
+	} else {
+		spin_unlock_irqrestore(&rw_lock, irq_flags);
+	}
+
+	atomic_inc(&open_count);
+
+#if BT_ENABLE_IRQ_WAKE
+	if (disable_irq_wake(bsi->host_wake_irq))
+		BT_ERR("Couldn't disable hostwake IRQ wakeup mode");
+#endif
+	free_irq(bsi->host_wake_irq, NULL);
+	wake_lock_timeout(&bsi->wake_lock, HZ / 2);
+}
+
+void bluesleep_setup_uart_port(struct platform_device *uart_dev)
+{
+	bluesleep_uart_dev = uart_dev;
+}
+
+static int bluesleep_populate_dt_pinfo(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	int tmp;
+	const void *prop;
+
+	tmp = of_get_named_gpio(np, "bt_host_wake", 0);
+	if (tmp < 0) {
+		BT_ERR("couldn't find host_wake gpio");
+		return -ENODEV;
+	}
+	bsi->host_wake = tmp;
+
+	tmp = of_get_named_gpio(np, "bt_ext_wake", 0);
+	if (tmp < 0)
+		bsi->has_ext_wake = 0;
+	else
+		bsi->has_ext_wake = 1;
+
+	if (bsi->has_ext_wake)
+		bsi->ext_wake = tmp;
+
+	prop = of_get_property(np, "bt_port_id", NULL);
+	if (prop) {
+		bt_port_id = of_read_ulong(prop, 1);
+		BT_INFO("bt port id is %d\n", bt_port_id);
+	}
+
+	BT_INFO("bt_host_wake %d, bt_ext_wake %d",
+			bsi->host_wake,
+			bsi->ext_wake);
+	return 0;
+}
+
+static int bluesleep_populate_pinfo(struct platform_device *pdev)
+{
+	struct resource *res;
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_IO,
+				"gpio_host_wake");
+	if (!res) {
+		BT_ERR("couldn't find host_wake gpio");
+		return -ENODEV;
+	}
+	bsi->host_wake = res->start;
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_IO,
+				"gpio_ext_wake");
+	if (!res)
+		bsi->has_ext_wake = 0;
+	else
+		bsi->has_ext_wake = 1;
+
+	if (bsi->has_ext_wake)
+		bsi->ext_wake = res->start;
+
+	return 0;
+}
+
+static int bluesleep_probe(struct platform_device *pdev)
+{
+	/* struct resource *res; */
+	int ret;
+
+	bsi = kzalloc(sizeof(struct bluesleep_info), GFP_KERNEL);
+	if (!bsi)
+		return -ENOMEM;
+
+	if (pdev->dev.of_node) {
+		ret = bluesleep_populate_dt_pinfo(pdev);
+		if (ret < 0) {
+			BT_ERR("couldn't populate info from dt");
+			return ret;
+		}
+	} else {
+		ret = bluesleep_populate_pinfo(pdev);
+		if (ret < 0) {
+			BT_ERR("couldn't populate info");
+			return ret;
+		}
+	}
+
+	/* configure host_wake as input */
+	ret = gpio_request_one(bsi->host_wake, GPIOF_IN, "bt_host_wake");
+	if (ret < 0) {
+		BT_ERR("failed to configure input direction for GPIO %d err %d",
+				bsi->host_wake, ret);
+		goto free_bsi;
+	}
+
+	if (debug_mask & DEBUG_BTWAKE)
+		pr_info("BT WAKE: set to wake\n");
+	if (bsi->has_ext_wake) {
+		/* configure ext_wake as output mode*/
+		ret = gpio_request_one(bsi->ext_wake,
+				GPIOF_OUT_INIT_LOW, "bt_ext_wake");
+		if (ret < 0) {
+			BT_ERR("failed to config output");
+			BT_ERR("	for GPIO %d err %d",
+					bsi->ext_wake, ret);
+			goto free_bt_host_wake;
+		}
+	}
+	clear_bit(BT_EXT_WAKE, &flags);
+
+	bsi->host_wake_irq =
+		irq_of_parse_and_map(pdev->dev.of_node, 0);
+	if (bsi->host_wake_irq < 0) {
+		BT_ERR("couldn't find host_wake irq");
+		ret = -ENODEV;
+		goto free_bt_ext_wake;
+	}
+
+	gpio_for_irq(bsi->host_wake,
+				AML_GPIO_IRQ(bsi->host_wake_irq, FILTER_NUM7,
+				GPIO_IRQ_FALLING));
+
+	bsi->irq_polarity = POLARITY_LOW;/*low edge (falling edge)*/
+
+	wake_lock_init(&bsi->wake_lock,
+		WAKE_LOCK_SUSPEND, "bluesleep");
+	clear_bit(BT_SUSPEND, &flags);
+
+	BT_INFO("host_wake_irq %d, polarity %d",
+			bsi->host_wake_irq,
+			bsi->irq_polarity);
+
+	return 0;
+
+free_bt_ext_wake:
+	gpio_free(bsi->ext_wake);
+free_bt_host_wake:
+	gpio_free(bsi->host_wake);
+free_bsi:
+	kfree(bsi);
+	return ret;
+}
+
+static int bluesleep_remove(struct platform_device *pdev)
+{
+	gpio_free(bsi->host_wake);
+	gpio_free(bsi->ext_wake);
+	wake_lock_destroy(&bsi->wake_lock);
+	kfree(bsi);
+	return 0;
+}
+
+
+static int bluesleep_resume(struct platform_device *pdev)
+{
+	if (test_bit(BT_SUSPEND, &flags)) {
+		if (debug_mask & DEBUG_SUSPEND)
+			pr_info("bluesleep resuming...\n");
+		if ((bsi->uport != NULL) &&
+			(gpio_get_value(bsi->host_wake) == bsi->irq_polarity)) {
+			if (debug_mask & DEBUG_SUSPEND)
+				pr_info("bluesleep resume from BT event...\n");
+		}
+		clear_bit(BT_SUSPEND, &flags);
+	}
+	return 0;
+}
+
+static int bluesleep_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	if (debug_mask & DEBUG_SUSPEND)
+		pr_info("bluesleep suspending...\n");
+	set_bit(BT_SUSPEND, &flags);
+	return 0;
+}
+
+static const struct of_device_id bluesleep_match_table[] = {
+	{ .compatible = "amlogic, bluesleep" },
+	{}
+};
+
+static struct platform_driver bluesleep_driver = {
+	.probe = bluesleep_probe,
+	.remove = bluesleep_remove,
+	.suspend = bluesleep_suspend,
+	.resume = bluesleep_resume,
+	.driver = {
+		.name = "bluesleep",
+		.owner = THIS_MODULE,
+		.of_match_table = bluesleep_match_table,
+	},
+};
+
+static int bluesleep_proc_show(struct seq_file *m, void *v)
+{
+	switch ((long)m->private) {
+	case PROC_BTWAKE:
+		seq_printf(m, "btwake: %u\n", test_bit(BT_EXT_WAKE, &flags));
+		break;
+	case PROC_HOSTWAKE:
+		seq_printf(m, "hostwake: %u\n", gpio_get_value(bsi->host_wake));
+		break;
+	case PROC_PROTO:
+		seq_printf(m, "proto: %u\n",
+				test_bit(BT_PROTO, &flags) ? 1 : 0);
+		break;
+	case PROC_ASLEEP:
+		seq_printf(m, "asleep: %u\n",
+				test_bit(BT_ASLEEP, &flags) ? 1 : 0);
+		break;
+	case PROC_LPM:
+		seq_printf(m, "lpm: %u\n",
+				 has_lpm_enabled ? 1 : 0);
+		break;
+	case PROC_BTWRITE:
+		seq_printf(m, "lpm: %u\n",
+				test_bit(BT_TXDATA, &flags) ? 1 : 0);
+		break;
+
+	default:
+		return 0;
+	}
+	return 0;
+}
+
+static ssize_t bluesleep_proc_write(struct file *file, const char *buf,
+	size_t count, loff_t *pos)
+{
+	void *data = PDE_DATA(file_inode(file));
+	char lbuf[32];
+
+	if (count >= sizeof(lbuf))
+		count = sizeof(lbuf)-1;
+
+	if (copy_from_user(lbuf, buf, count))
+		return -EFAULT;
+	lbuf[count] = 0;
+
+	switch ((long)data) {
+	case PROC_BTWAKE:
+		if (lbuf[0] == '0') {
+			if (debug_mask & DEBUG_BTWAKE)
+				pr_info("BT WAKE: set to wake\n");
+			if (bsi->has_ext_wake == 1)
+				gpio_set_value(bsi->ext_wake, 1);
+			clear_bit(BT_EXT_WAKE, &flags);
+		} else if (buf[0] == '1') {
+			if (debug_mask & DEBUG_BTWAKE)
+				pr_info("BT WAKE: set to sleep\n");
+			if (bsi->has_ext_wake == 1)
+				gpio_set_value(bsi->ext_wake, 0);
+			set_bit(BT_EXT_WAKE, &flags);
+		}
+		break;
+	case PROC_PROTO:
+		if (lbuf[0] == '0')
+			bluesleep_stop();
+		else
+			bluesleep_start();
+		break;
+	case PROC_LPM:
+		if (lbuf[0] == '0') {
+			bluesleep_stop();
+			has_lpm_enabled = false;
+			bsi->uport = NULL;
+		} else {
+			if (!has_lpm_enabled) {
+				has_lpm_enabled = true;
+				bsi->uport = get_uart_port(bt_port_id);
+				if (bsi->uport)
+					bluesleep_start();
+				else
+					pr_info("bt port is null\n");
+			}
+		}
+		break;
+	case PROC_BTWRITE:
+		if (lbuf[0] != '0' && bsi->uport)
+			bluesleep_outgoing_data();
+		break;
+	default:
+		return 0;
+	}
+
+	return count;
+}
+
+static int bluesleep_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, bluesleep_proc_show, PDE_DATA(inode));
+}
+
+static const struct file_operations bluesleep_proc_readwrite_fops = {
+	.owner	= THIS_MODULE,
+	.open	= bluesleep_proc_open,
+	.read   = seq_read,
+	.write  = bluesleep_proc_write,
+};
+static const struct file_operations bluesleep_proc_read_fops = {
+	.owner	= THIS_MODULE,
+	.open	= bluesleep_proc_open,
+	.read   = seq_read,
+};
+
+/**
+ * Initializes the module.
+ * @return On success, 0. On error, -1, and <code>errno</code> is set
+ * appropriately.
+ */
+static int __init bluesleep_init(void)
+{
+	int retval;
+	struct proc_dir_entry *ent;
+
+	BT_INFO("BlueSleep Mode Driver Ver %s", VERSION);
+
+	retval = platform_driver_register(&bluesleep_driver);
+	if (retval)
+		return retval;
+
+	if (bsi == NULL)
+		return 0;
+
+#if !BT_BLUEDROID_SUPPORT
+	bluesleep_hdev = NULL;
+#endif
+
+	bluetooth_dir = proc_mkdir("bluetooth", NULL);
+	if (bluetooth_dir == NULL) {
+		BT_ERR("Unable to create /proc/bluetooth directory");
+		return -ENOMEM;
+	}
+
+	sleep_dir = proc_mkdir("sleep", bluetooth_dir);
+	if (sleep_dir == NULL) {
+		BT_ERR("Unable to create /proc/%s directory", PROC_DIR);
+		return -ENOMEM;
+	}
+
+	ent = proc_create_data("btwake", 0664,
+			sleep_dir, &bluesleep_proc_readwrite_fops,
+			(void *)PROC_BTWAKE);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/btwake entry", PROC_DIR);
+		retval = -ENOMEM;
+		goto fail;
+	}
+
+	ent = proc_create_data("hostwake", 0444, sleep_dir,
+				&bluesleep_proc_read_fops,
+				(void *)PROC_HOSTWAKE);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/hostwake entry", PROC_DIR);
+		retval = -ENOMEM;
+		goto fail;
+	}
+
+	ent = proc_create_data("proto", 0664,
+			sleep_dir, &bluesleep_proc_readwrite_fops,
+			(void *)PROC_PROTO);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/proto entry", PROC_DIR);
+		retval = -ENOMEM;
+		goto fail;
+	}
+
+	ent = proc_create_data("asleep", 0444,
+			sleep_dir, &bluesleep_proc_read_fops,
+			(void *)PROC_ASLEEP);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/asleep entry", PROC_DIR);
+		retval = -ENOMEM;
+		goto fail;
+	}
+
+#if BT_BLUEDROID_SUPPORT
+	ent = proc_create_data("lpm", 0664,
+			sleep_dir, &bluesleep_proc_readwrite_fops,
+			(void *)PROC_LPM);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/lpm entry", PROC_DIR);
+		retval = -ENOMEM;
+		goto fail;
+	}
+
+	ent = proc_create_data("btwrite", 0664,
+			sleep_dir, &bluesleep_proc_readwrite_fops,
+			(void *)PROC_BTWRITE);
+	if (ent == NULL) {
+		BT_ERR("Unable to create /proc/%s/btwrite entry", PROC_DIR);
+		retval = -ENOMEM;
+		goto fail;
+	}
+
+#endif
+
+	flags = 0;
+
+	spin_lock_init(&rw_lock);
+
+	init_timer(&tx_timer);
+	tx_timer.function = bluesleep_tx_timer_expire;
+	tx_timer.data = 0;
+
+	tasklet_init(&hostwake_task, bluesleep_hostwake_task, 0);
+
+	if (debug_mask & DEBUG_BTWAKE)
+		pr_info("BT WAKE: set to wake\n");
+	if (bsi->has_ext_wake == 1)
+		gpio_set_value(bsi->ext_wake, 1);
+	clear_bit(BT_EXT_WAKE, &flags);
+#if !BT_BLUEDROID_SUPPORT
+	hci_register_notifier(&hci_event_nblock);
+#endif
+
+	return 0;
+
+fail:
+#if BT_BLUEDROID_SUPPORT
+	remove_proc_entry("btwrite", sleep_dir);
+	remove_proc_entry("lpm", sleep_dir);
+#endif
+	remove_proc_entry("asleep", sleep_dir);
+	remove_proc_entry("proto", sleep_dir);
+	remove_proc_entry("hostwake", sleep_dir);
+	remove_proc_entry("btwake", sleep_dir);
+	remove_proc_entry("sleep", bluetooth_dir);
+	remove_proc_entry("bluetooth", 0);
+	return retval;
+}
+
+/**
+ * Cleans up the module.
+ */
+static void __exit bluesleep_exit(void)
+{
+	if (bsi == NULL)
+		return;
+
+	if (bsi->has_ext_wake == 1)
+		gpio_set_value(bsi->ext_wake, 1);
+	clear_bit(BT_EXT_WAKE, &flags);
+	if (test_bit(BT_PROTO, &flags)) {
+		if (disable_irq_wake(bsi->host_wake_irq))
+			BT_ERR("Couldn't disable hostwake IRQ wakeup mode");
+		free_irq(bsi->host_wake_irq, NULL);
+		del_timer(&tx_timer);
+		if (test_bit(BT_ASLEEP, &flags))
+			hsuart_power(1);
+	}
+
+#if !BT_BLUEDROID_SUPPORT
+	hci_unregister_notifier(&hci_event_nblock);
+#endif
+	platform_driver_unregister(&bluesleep_driver);
+
+#if BT_BLUEDROID_SUPPORT
+	remove_proc_entry("btwrite", sleep_dir);
+	remove_proc_entry("lpm", sleep_dir);
+#endif
+	remove_proc_entry("asleep", sleep_dir);
+	remove_proc_entry("proto", sleep_dir);
+	remove_proc_entry("hostwake", sleep_dir);
+	remove_proc_entry("btwake", sleep_dir);
+	remove_proc_entry("sleep", bluetooth_dir);
+	remove_proc_entry("bluetooth", 0);
+}
+
+module_init(bluesleep_init);
+module_exit(bluesleep_exit);
+
+MODULE_DESCRIPTION("Bluetooth Sleep Mode Driver ver %s " VERSION);
+#ifdef MODULE_LICENSE
+MODULE_LICENSE("GPL");
+#endif
+
diff --git a/drivers/misc/aml_bt/bluesleep.h b/drivers/misc/aml_bt/bluesleep.h
new file mode 100644
index 0000000..bf2d818
--- /dev/null
+++ b/drivers/misc/aml_bt/bluesleep.h
@@ -0,0 +1,22 @@
+/*
+ * drivers/amlogic/bluetooth/bluesleep.h
+ *
+ * Copyright (C) 2017 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ */
+
+#ifndef _BLUESLEEP_H
+#define _BLUESLEEP_H
+#include <linux/serial_core.h>
+extern struct uart_port *get_uart_port(int id);
+#endif
diff --git a/drivers/misc/aml_bt/bt_device.c b/drivers/misc/aml_bt/bt_device.c
new file mode 100644
index 0000000..be256b5
--- /dev/null
+++ b/drivers/misc/aml_bt/bt_device.c
@@ -0,0 +1,350 @@
+/*
+ * drivers/amlogic/bluetooth/bt_device.c
+ *
+ * Copyright (C) 2017 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/delay.h>
+#include <linux/string.h>
+#include <linux/ctype.h>
+#include <linux/leds.h>
+#include <linux/gpio.h>
+#include <linux/rfkill.h>
+#include <linux/slab.h>
+#include <linux/of.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/aml_gpio_consumer.h>
+#include <linux/of_gpio.h>
+#include <linux/io.h>
+#include <linux/bt_device.h>
+#include "../../gpio/gpiolib.h"
+
+#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#include <linux/amlogic/pm.h>
+static struct early_suspend bt_early_suspend;
+#endif
+
+#define BT_RFKILL "bt_rfkill"
+
+struct bt_dev_runtime_data {
+	struct rfkill *bt_rfk;
+	struct bt_dev_data *pdata;
+};
+
+static void bt_device_init(struct bt_dev_data *pdata)
+{
+	if (pdata->gpio_reset > 0)
+		gpio_request(pdata->gpio_reset, BT_RFKILL);
+
+	if (pdata->gpio_en > 0)
+		gpio_request(pdata->gpio_en, BT_RFKILL);
+
+}
+
+static void bt_device_deinit(struct bt_dev_data *pdata)
+{
+	if (pdata->gpio_reset > 0)
+		gpio_free(pdata->gpio_reset);
+
+	if (pdata->gpio_en > 0)
+		gpio_free(pdata->gpio_en);
+
+}
+
+static void bt_device_on(struct bt_dev_data *pdata)
+{
+	if (pdata->gpio_reset > 0) {
+
+		if ((pdata->power_on_pin_OD) && (pdata->power_low_level)) {
+			gpio_direction_input(pdata->gpio_reset);
+		} else {
+			gpio_direction_output(pdata->gpio_reset,
+				pdata->power_low_level);
+		}
+	}
+	if (pdata->gpio_en > 0) {
+
+		if ((pdata->power_on_pin_OD)
+			&& (pdata->power_low_level)) {
+			gpio_direction_input(pdata->gpio_en);
+		} else {
+			gpio_direction_output(pdata->gpio_en,
+				pdata->power_low_level);
+		}
+	}
+	msleep(200);
+	if (pdata->gpio_reset > 0) {
+
+		if ((pdata->power_on_pin_OD)
+			&& (!pdata->power_low_level)) {
+			gpio_direction_input(pdata->gpio_reset);
+		} else {
+			gpio_direction_output(pdata->gpio_reset,
+				!pdata->power_low_level);
+		}
+	}
+	if (pdata->gpio_en > 0) {
+
+		if ((pdata->power_on_pin_OD)
+			&& (!pdata->power_low_level)) {
+			gpio_direction_input(pdata->gpio_en);
+		} else {
+			gpio_direction_output(pdata->gpio_en,
+				!pdata->power_low_level);
+		}
+	}
+	msleep(200);
+}
+
+static void bt_device_off(struct bt_dev_data *pdata)
+{
+	if (pdata->gpio_reset > 0) {
+
+		if ((pdata->power_on_pin_OD)
+			&& (pdata->power_low_level)) {
+			gpio_direction_input(pdata->gpio_reset);
+		} else {
+			gpio_direction_output(pdata->gpio_reset,
+				pdata->power_low_level);
+		}
+	}
+	if (pdata->gpio_en > 0) {
+
+		if ((pdata->power_on_pin_OD)
+			&& (pdata->power_low_level)) {
+			gpio_direction_input(pdata->gpio_en);
+		} else {
+			gpio_direction_output(pdata->gpio_en,
+				pdata->power_low_level);
+		}
+	}
+	msleep(20);
+}
+
+static int bt_set_block(void *data, bool blocked)
+{
+	struct bt_dev_data *pdata = data;
+
+	pr_info("BT_RADIO going: %s\n", blocked ? "off" : "on");
+
+	if (!blocked) {
+		pr_info("BCM_BT: going ON\n");
+		bt_device_on(pdata);
+	} else {
+		pr_info("BCM_BT: going OFF\n");
+	bt_device_off(pdata);
+	}
+	return 0;
+}
+
+static const struct rfkill_ops bt_rfkill_ops = {
+	.set_block = bt_set_block,
+};
+#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+static void bt_earlysuspend(struct early_suspend *h)
+{
+
+}
+
+static void bt_lateresume(struct early_suspend *h)
+{
+}
+#endif
+
+static int bt_suspend(struct platform_device *pdev,
+	pm_message_t state)
+{
+
+	return 0;
+}
+
+static int bt_resume(struct platform_device *pdev)
+{
+
+	return 0;
+}
+
+static int bt_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+	const void *prop;
+	struct rfkill *bt_rfk;
+	struct bt_dev_data *pdata = NULL;
+	struct bt_dev_runtime_data *prdata;
+
+#ifdef CONFIG_OF
+	if (pdev->dev.of_node) {
+		const char *str;
+		struct gpio_desc *desc;
+
+		pr_info("enter bt_probe of_node\n");
+		pdata = kzalloc(sizeof(struct bt_dev_data), GFP_KERNEL);
+		ret = of_property_read_string(pdev->dev.of_node,
+			"gpio_reset", &str);
+		if (ret) {
+			pr_warn("not get gpio_reset\n");
+			pdata->gpio_reset = 0;
+		} else {
+			desc = of_get_named_gpiod_flags(pdev->dev.of_node,
+				"gpio_reset", 0, NULL);
+			pdata->gpio_reset = desc_to_gpio(desc);
+		}
+
+	ret = of_property_read_string(pdev->dev.of_node,
+		"gpio_en", &str);
+		if (ret) {
+			pr_warn("not get gpio_en\n");
+			pdata->gpio_en = 0;
+		} else {
+			desc = of_get_named_gpiod_flags(pdev->dev.of_node,
+				"gpio_en", 0, NULL);
+			pdata->gpio_en = desc_to_gpio(desc);
+		}
+
+		prop = of_get_property(pdev->dev.of_node,
+		"power_low_level", NULL);
+		if (prop) {
+			pr_info("power on valid level is low");
+			pdata->power_low_level = 1;
+		} else {
+			pr_info("power on valid level is high");
+			pdata->power_low_level = 0;
+			pdata->power_on_pin_OD = 0;
+		}
+		ret = of_property_read_u32(pdev->dev.of_node,
+		"power_on_pin_OD", &pdata->power_on_pin_OD);
+		if (ret)
+			pdata->power_on_pin_OD = 0;
+		pr_info("bt: power_on_pin_OD = %d;\n", pdata->power_on_pin_OD);
+	}
+#else
+	pdata = (struct bt_dev_data *)(pdev->dev.platform_data);
+#endif
+
+	bt_device_init(pdata);
+	/* default to bluetooth off */
+	/* rfkill_switch_all(RFKILL_TYPE_BLUETOOTH, 1); */
+	/* bt_device_off(pdata); */
+
+	bt_rfk = rfkill_alloc("bt-dev", &pdev->dev,
+		RFKILL_TYPE_BLUETOOTH,
+		&bt_rfkill_ops, pdata);
+
+	if (!bt_rfk) {
+		pr_info("rfk alloc fail\n");
+		ret = -ENOMEM;
+		goto err_rfk_alloc;
+	}
+
+	rfkill_init_sw_state(bt_rfk, false);
+	ret = rfkill_register(bt_rfk);
+	if (ret) {
+		pr_err("rfkill_register fail\n");
+		goto err_rfkill;
+	}
+	prdata = kmalloc(sizeof(struct bt_dev_runtime_data),
+	GFP_KERNEL);
+
+	if (!prdata)
+		goto err_rfkill;
+
+	prdata->bt_rfk = bt_rfk;
+	prdata->pdata = pdata;
+	platform_set_drvdata(pdev, prdata);
+#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+	bt_early_suspend.level =
+		EARLY_SUSPEND_LEVEL_DISABLE_FB;
+	bt_early_suspend.suspend = bt_earlysuspend;
+	bt_early_suspend.resume = bt_lateresume;
+	bt_early_suspend.param = pdev;
+	register_early_suspend(&bt_early_suspend);
+#endif
+
+	return 0;
+
+err_rfkill:
+	rfkill_destroy(bt_rfk);
+err_rfk_alloc:
+	bt_device_deinit(pdata);
+	return ret;
+
+}
+
+static int bt_remove(struct platform_device *pdev)
+{
+	struct bt_dev_runtime_data *prdata =
+		platform_get_drvdata(pdev);
+	struct rfkill *rfk = NULL;
+	struct bt_dev_data *pdata = NULL;
+
+	platform_set_drvdata(pdev, NULL);
+
+	if (prdata) {
+		rfk = prdata->bt_rfk;
+		pdata = prdata->pdata;
+	}
+
+	if (pdata) {
+		bt_device_deinit(pdata);
+		kfree(pdata);
+	}
+
+	if (rfk) {
+		rfkill_unregister(rfk);
+		rfkill_destroy(rfk);
+	}
+	rfk = NULL;
+
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id bt_dev_dt_match[] = {
+	{	.compatible = "amlogic, bt-dev",
+	},
+	{},
+};
+#else
+#define bt_dev_dt_match NULL
+#endif
+
+static struct platform_driver bt_driver = {
+	.driver		= {
+		.name	= "bt-dev",
+		.of_match_table = bt_dev_dt_match,
+	},
+	.probe		= bt_probe,
+	.remove		= bt_remove,
+	.suspend	= bt_suspend,
+	.resume	 = bt_resume,
+};
+
+static int __init bt_init(void)
+{
+	pr_info("amlogic rfkill init\n");
+
+	return platform_driver_register(&bt_driver);
+}
+static void __exit bt_exit(void)
+{
+	platform_driver_unregister(&bt_driver);
+}
+
+module_init(bt_init);
+module_exit(bt_exit);
+MODULE_DESCRIPTION("bt rfkill");
+MODULE_AUTHOR("");
+MODULE_LICENSE("GPL");
diff --git a/include/linux/aml_gpio_consumer.h b/include/linux/aml_gpio_consumer.h
new file mode 100644
index 0000000..6b4de14
--- /dev/null
+++ b/include/linux/aml_gpio_consumer.h
@@ -0,0 +1,55 @@
+/*
+ * include/linux/amlogic/aml_gpio_consumer.h
+ *
+ * Copyright (C) 2017 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ */
+
+#include <linux/gpio.h>
+#ifndef __AML_GPIO_CONSUMER_H__
+#define __AML_GPIO_CONSUMER_H__
+#include <linux/gpio/consumer.h>
+#include <linux/of_gpio.h>
+#define AML_GPIO_IRQ(irq_bank, filter, type) \
+((irq_bank&0x7)|(filter&0x7)<<8|(type&0x3)<<16)
+
+enum {
+	GPIO_IRQ0 = 0,
+	GPIO_IRQ1,
+	GPIO_IRQ2,
+	GPIO_IRQ3,
+	GPIO_IRQ4,
+	GPIO_IRQ5,
+	GPIO_IRQ6,
+	GPIO_IRQ7,
+};
+
+enum {
+	GPIO_IRQ_HIGH = 0,
+	GPIO_IRQ_LOW,
+	GPIO_IRQ_RISING,
+	GPIO_IRQ_FALLING,
+};
+
+enum {
+	FILTER_NUM0 = 0,
+	FILTER_NUM1,
+	FILTER_NUM2,
+	FILTER_NUM3,
+	FILTER_NUM4,
+	FILTER_NUM5,
+	FILTER_NUM6,
+	FILTER_NUM7,
+};
+
+#endif
diff --git a/include/linux/bt_device.h b/include/linux/bt_device.h
new file mode 100644
index 0000000..c82840d
--- /dev/null
+++ b/include/linux/bt_device.h
@@ -0,0 +1,29 @@
+/*
+ * include/linux/amlogic/bt_device.h
+ *
+ * Copyright (C) 2017 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ */
+
+#ifndef __PLAT_MESON_BT_DEVICE_H
+#define __PLAT_MESON_BT_DEVICE_H
+
+struct bt_dev_data {
+	int gpio_reset;
+	int gpio_en;
+	int power_low_level;
+	int power_on_pin_OD;
+};
+
+#endif
+
-- 
1.9.1

